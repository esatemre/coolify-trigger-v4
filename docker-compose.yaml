services:
  trigger:
    networks:
      - trigger-net
    image: 'ghcr.io/triggerdotdev/trigger.dev:${TRIGGER_IMAGE_TAG:-v4-beta}'
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - clickhouse
      - electric
      - minio
    user: root
    command: "sh -c \"chown -R node:node /home/node/shared && exec ./scripts/entrypoint.sh\"\n"
    environment:
      REMIX_APP_PORT: 3000
      APP_ORIGIN: ${SERVICE_URL_TRIGGER}
      LOGIN_ORIGIN: ${SERVICE_URL_TRIGGER}
      API_ORIGIN: ${SERVICE_URL_TRIGGER}
      SESSION_SECRET: '${SERVICE_PASSWORD_SESSION}'
      MAGIC_LINK_SECRET: '${SERVICE_PASSWORD_MAGIC}'
      ENCRYPTION_KEY: '${SERVICE_PASSWORD_ENCRYPTION}'
      MANAGED_WORKER_SECRET: '${SERVICE_PASSWORD_MANAGEDWORKER}'
      DATABASE_URL: 'postgresql://postgres:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-trigger}?schema=public&sslmode=disable'
      DIRECT_URL: 'postgresql://postgres:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-trigger}?schema=public&sslmode=disable'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_TLS_DISABLED: true
      ELECTRIC_ORIGIN: 'http://electric:3000'
      DEV_OTEL_EXPORTER_OTLP_ENDPOINT: '${SERVICE_URL_TRIGGER}/otel'
      DEPLOY_REGISTRY_HOST: '${DEPLOY_REGISTRY_HOST:-ghcr.io}'
      DEPLOY_REGISTRY_NAMESPACE: '${DEPLOY_REGISTRY_NAMESPACE:-}'
      DEPLOY_REGISTRY_USERNAME: ${DEPLOY_REGISTRY_USERNAME:-}
      DEPLOY_REGISTRY_PASSWORD: '${DEPLOY_REGISTRY_PASSWORD:-}'
      OBJECT_STORE_BASE_URL: 'http://minio:9000'
      OBJECT_STORE_ACCESS_KEY_ID: admin
      OBJECT_STORE_SECRET_ACCESS_KEY: '${SERVICE_PASSWORD_MINIO}'
      GRACEFUL_SHUTDOWN_TIMEOUT: 1000
      NODE_MAX_OLD_SPACE_SIZE: ${NODE_MAX_OLD_SPACE_SIZE:-1024}
      TRIGGER_BOOTSTRAP_ENABLED: 1
      TRIGGER_BOOTSTRAP_WORKER_GROUP_NAME: bootstrap
      TRIGGER_BOOTSTRAP_WORKER_TOKEN_PATH: /home/node/shared/worker_token
      CLICKHOUSE_URL: 'http://${CLICKHOUSE_ADMIN_USER:-default}:${SERVICE_PASSWORD_64_CLICKHOUSE}@clickhouse:8123?secure=false'
      CLICKHOUSE_LOG_LEVEL: info
      INTERNAL_OTEL_TRACE_LOGGING_ENABLED: 0
      RUN_REPLICATION_ENABLED: 1
      RUN_REPLICATION_CLICKHOUSE_URL: 'http://${CLICKHOUSE_ADMIN_USER:-default}:${SERVICE_PASSWORD_64_CLICKHOUSE}@clickhouse:8123'
      RUN_REPLICATION_LOG_LEVEL: info
      APP_LOG_LEVEL: info
      TRIGGER_TELEMETRY_DISABLED: 0
      # Email configuration (optional - magic links logged if not set)
      EMAIL_TRANSPORT: ${EMAIL_TRANSPORT:-}
      FROM_EMAIL: ${FROM_EMAIL:-}
      REPLY_TO_EMAIL: ${REPLY_TO_EMAIL:-}
      # Resend
      RESEND_API_KEY: ${RESEND_API_KEY:-}
      # SMTP alternative
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      # GitHub OAuth (optional)
      AUTH_GITHUB_CLIENT_ID: ${AUTH_GITHUB_CLIENT_ID:-}
      AUTH_GITHUB_CLIENT_SECRET: ${AUTH_GITHUB_CLIENT_SECRET:-}
      # Email whitelist (applies to all auth methods)
      WHITELISTED_EMAILS: ${WHITELISTED_EMAILS:-}
      # AWS SES alternative
      AWS_REGION: ${AWS_REGION:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      # Admin access (regex pattern to auto-promote users to admin)
      ADMIN_EMAILS: ${ADMIN_EMAILS:-}
      # Concurrency limits (capacity planning)
      DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT: ${DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT:-100}
      DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT: ${DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT:-300}
      # Development settings
      DEV_MAX_CONCURRENT_RUNS: ${DEV_MAX_CONCURRENT_RUNS:-25}
      # Worker settings
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-10}
      WORKER_POLL_INTERVAL: ${WORKER_POLL_INTERVAL:-1000}
      # Payload & metadata limits
      TASK_PAYLOAD_OFFLOAD_THRESHOLD: ${TASK_PAYLOAD_OFFLOAD_THRESHOLD:-524288}
      TASK_PAYLOAD_MAXIMUM_SIZE: ${TASK_PAYLOAD_MAXIMUM_SIZE:-3145728}
      BATCH_TASK_PAYLOAD_MAXIMUM_SIZE: ${BATCH_TASK_PAYLOAD_MAXIMUM_SIZE:-1000000}
      TASK_RUN_METADATA_MAXIMUM_SIZE: ${TASK_RUN_METADATA_MAXIMUM_SIZE:-262144}
      # Realtime settings
      REALTIME_STREAM_MAX_LENGTH: ${REALTIME_STREAM_MAX_LENGTH:-1000}
      REALTIME_STREAM_TTL: ${REALTIME_STREAM_TTL:-86400}
    volumes:
      - 'shared-data:/home/node/shared'
    healthcheck:
      test:
        - CMD
        - node
        - '-e'
        - "require('http').get('http://127.0.0.1:3000/healthcheck',(r)=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  postgres:
    networks:
      - trigger-net
    image: postgres:${POSTGRES_IMAGE_TAG:-14}
    restart: unless-stopped
    command:
      - -c
      - wal_level=logical
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: '${SERVICE_PASSWORD_POSTGRES}'
      POSTGRES_DB: '${POSTGRES_DB:-trigger}'
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 20s
      retries: 10
      start_period: 10s
  redis:
    networks:
      - trigger-net
    image: 'redis:${REDIS_IMAGE_TAG:-7}'
    restart: unless-stopped
    volumes:
      - 'redis-data:/data'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  electric:
    networks:
      - trigger-net
    image: 'electricsql/electric:${ELECTRIC_IMAGE_TAG:-1.0.24}'
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      DATABASE_URL: 'postgresql://postgres:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-trigger}?schema=public&sslmode=disable'
      ELECTRIC_INSECURE: 'true'
      ELECTRIC_USAGE_REPORTING: 'false'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  clickhouse:
    networks:
      - trigger-net
    image: 'bitnamilegacy/clickhouse:${CLICKHOUSE_IMAGE_TAG:-latest}'
    restart: unless-stopped
    environment:
      CLICKHOUSE_ADMIN_USER: ${CLICKHOUSE_ADMIN_USER:-default}
      CLICKHOUSE_ADMIN_PASSWORD: '${SERVICE_PASSWORD_64_CLICKHOUSE}'
    volumes:
      - 'clickhouse-data:/bitnami/clickhouse'
      - './clickhouse/override.xml:/bitnami/clickhouse/etc/config.d/override.xml:ro'
    healthcheck:
      test: ["CMD", "clickhouse-client", "--host", "localhost", "--port", "9000", "--user", "${CLICKHOUSE_ADMIN_USER:-default}", "--password", "${SERVICE_PASSWORD_64_CLICKHOUSE}", "--query", "SELECT 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  minio:
    networks:
      - trigger-net
    image: bitnamilegacy/minio:${MINIO_IMAGE_TAG:-latest}
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: '${SERVICE_PASSWORD_MINIO}'
      MINIO_DEFAULT_BUCKETS: packets
      MINIO_BROWSER: 'on'
    volumes:
      - 'minio-data:/bitnami/minio/data'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  supervisor:
    networks:
      - trigger-net
    image: 'ghcr.io/triggerdotdev/supervisor:${TRIGGER_IMAGE_TAG:-v4-beta}'
    restart: unless-stopped
    depends_on:
      - docker-proxy
      - trigger
    user: root
    command: "sh -c \"chown -R node:node /home/node/shared && exec /usr/bin/dumb-init -- pnpm run --filter supervisor start\"\n"
    environment:
      TRIGGER_API_URL: http://trigger:3000
      OTEL_EXPORTER_OTLP_ENDPOINT: http://trigger:3000/otel
      TRIGGER_WORKER_TOKEN: 'file:///home/node/shared/worker_token'
      MANAGED_WORKER_SECRET: ${SERVICE_PASSWORD_MANAGEDWORKER}
      TRIGGER_WORKLOAD_API_DOMAIN: supervisor
      TRIGGER_WORKLOAD_API_PORT_EXTERNAL: 8020
      DOCKER_HOST: tcp://docker-proxy:2375
      DOCKER_RUNNER_NETWORKS: ${DOCKER_RUNNER_NETWORKS:-trigger-net}
      DOCKER_AUTOREMOVE_EXITED_CONTAINERS: ${DOCKER_AUTOREMOVE_EXITED_CONTAINERS:-1}
      DOCKER_REGISTRY_URL: ${DEPLOY_REGISTRY_HOST:-ghcr.io}
      DOCKER_REGISTRY_USERNAME: ${DEPLOY_REGISTRY_USERNAME:-}
      DOCKER_REGISTRY_PASSWORD: '${DEPLOY_REGISTRY_PASSWORD:-}'
      DOCKER_ENFORCE_MACHINE_PRESETS: ${DOCKER_ENFORCE_MACHINE_PRESETS:-1}
      DEBUG: ${SUPERVISOR_DEBUG:-0}
      TRIGGER_DEQUEUE_INTERVAL_MS: ${TRIGGER_DEQUEUE_INTERVAL_MS:-250}
      TRIGGER_DEQUEUE_IDLE_INTERVAL_MS: ${TRIGGER_DEQUEUE_IDLE_INTERVAL_MS:-1000}
      # Runner settings
      RUNNER_PRETTY_LOGS: ${RUNNER_PRETTY_LOGS:-false}
      RUNNER_ADDITIONAL_ENV_VARS: ${RUNNER_ADDITIONAL_ENV_VARS:-}
    volumes:
      - 'shared-data:/home/node/shared'
    healthcheck:
      test: ["CMD", "node", "-e", "http.get('http://localhost:8020/health', res => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
  docker-proxy:
    networks:
      - trigger-net
    image: 'tecnativa/docker-socket-proxy:${DOCKER_PROXY_IMAGE_TAG:-latest}'
    restart: unless-stopped
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    environment:
      LOG_LEVEL: info
      POST: 1
      CONTAINERS: 1
      IMAGES: 1
      INFO: 1
      NETWORKS: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "2375"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s
volumes:
  postgres-data:
  redis-data:
  clickhouse-data:
  minio-data:
  shared-data:
networks:
  trigger-net: