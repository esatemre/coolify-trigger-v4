services:
  webapp:
    networks:
      - trigger-net
    image: 'ghcr.io/triggerdotdev/trigger.dev:main'
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - clickhouse
      - electric
      - minio
      - registry
    user: root
    command: "sh -c \"chown -R node:node /home/node/shared && exec ./scripts/entrypoint.sh\"\n"
    environment:
      SERVICE_FQDN_WEBAPP: '${SERVICE_FQDN_WEBAPP_3000}'
      SERVICE_FQDN_WEBAPP_3000:
      SERVICE_URL_WEBAPP_3000:
      SERVICE_FQDN_REGISTRY_5000:
      REMIX_APP_PORT: 3000
      APP_ORIGIN: ${SERVICE_URL_WEBAPP_3000}
      LOGIN_ORIGIN: ${SERVICE_URL_WEBAPP_3000}
      API_ORIGIN: ${SERVICE_URL_WEBAPP_3000}
      SESSION_SECRET: '${SERVICE_PASSWORD_SESSION}'
      MAGIC_LINK_SECRET: '${SERVICE_PASSWORD_MAGIC}'
      ENCRYPTION_KEY: '${SERVICE_PASSWORD_ENCRYPTION}'
      MANAGED_WORKER_SECRET: '${SERVICE_PASSWORD_MANAGEDWORKER}'
      DATABASE_URL: 'postgresql://${SERVICE_USER_POSTGRES:-postgres}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-trigger}?schema=public&sslmode=disable'
      DIRECT_URL: 'postgresql://${SERVICE_USER_POSTGRES:-postgres}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-trigger}?schema=public&sslmode=disable'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_TLS_DISABLED: true
      ELECTRIC_ORIGIN: 'http://electric:3000'
      DEV_OTEL_EXPORTER_OTLP_ENDPOINT: '${SERVICE_FQDN_WEBAPP}/otel'
      DEPLOY_REGISTRY_HOST: '${SERVICE_FQDN_REGISTRY_5000}'
      DEPLOY_REGISTRY_NAMESPACE: '${REGISTRY_NAMESPACE:-trigger}'
      DEPLOY_REGISTRY_USERNAME: ${REGISTRY_USERNAME:-trigger}
      DEPLOY_REGISTRY_PASSWORD: '${REGISTRY_PASSWORD:-very-secure-indeed}'
      OBJECT_STORE_BASE_URL: 'http://minio:9000'
      OBJECT_STORE_ACCESS_KEY_ID: admin
      OBJECT_STORE_SECRET_ACCESS_KEY: '${SERVICE_PASSWORD_MINIO}'
      GRACEFUL_SHUTDOWN_TIMEOUT: 1000
      NODE_MAX_OLD_SPACE_SIZE: ${NODE_MAX_OLD_SPACE_SIZE:-1024}
      TRIGGER_BOOTSTRAP_ENABLED: 1
      TRIGGER_BOOTSTRAP_WORKER_GROUP_NAME: bootstrap
      TRIGGER_BOOTSTRAP_WORKER_TOKEN_PATH: /home/node/shared/worker_token
      CLICKHOUSE_URL: 'http://${SERVICE_USER_CLICKHOUSE:-default}:${SERVICE_PASSWORD_64_CLICKHOUSE}@clickhouse:8123?secure=false'
      CLICKHOUSE_LOG_LEVEL: info
      INTERNAL_OTEL_TRACE_LOGGING_ENABLED: 0
      RUN_REPLICATION_ENABLED: 1
      RUN_REPLICATION_CLICKHOUSE_URL: 'http://${SERVICE_USER_CLICKHOUSE:-default}:${SERVICE_PASSWORD_64_CLICKHOUSE}@clickhouse:8123'
      RUN_REPLICATION_LOG_LEVEL: info
      APP_LOG_LEVEL: info
      TRIGGER_TELEMETRY_DISABLED: 0
    volumes:
      - 'shared-data:/home/node/shared'
    healthcheck:
      test:
        - CMD
        - node
        - '-e'
        - "require('http').get('http://127.0.0.1:3000/healthcheck',(r)=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  postgres:
    networks:
      - trigger-net
    image: postgres:14
    restart: unless-stopped
    command:
      - -c
      - wal_level=logical
    environment:
      POSTGRES_USER: '${SERVICE_USER_POSTGRES:-postgres}'
      POSTGRES_PASSWORD: '${SERVICE_PASSWORD_POSTGRES}'
      POSTGRES_DB: '${POSTGRES_DB:-trigger}'
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 20s
      retries: 10
      start_period: 10s
  redis:
    networks:
      - trigger-net
    image: 'redis:7'
    restart: unless-stopped
    volumes:
      - 'redis-data:/data'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  electric:
    networks:
      - trigger-net
    image: 'electricsql/electric:1.0.24'
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      DATABASE_URL: 'postgresql://${SERVICE_USER_POSTGRES:-postgres}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-trigger}?schema=public&sslmode=disable'
      ELECTRIC_INSECURE: 'true'
      ELECTRIC_USAGE_REPORTING: 'false'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  clickhouse:
    networks:
      - trigger-net
    image: 'bitnamilegacy/clickhouse:latest'
    restart: unless-stopped
    environment:
      CLICKHOUSE_ADMIN_USER: 'default'
      CLICKHOUSE_ADMIN_PASSWORD: '${SERVICE_PASSWORD_64_CLICKHOUSE}'
    volumes:
      - 'clickhouse-data:/bitnami/clickhouse'
      - './clickhouse/override.xml:/bitnami/clickhouse/etc/config.d/override.xml:ro'
    healthcheck:
      test: ["CMD", "clickhouse-client", "--host", "localhost", "--port", "9000", "--user", "default", "--password", "${CLICKHOUSE_PASSWORD:-password}", "--query", "SELECT 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  registry:
    networks:
      - trigger-net
    image: 'registry:2'
    restart: unless-stopped
    volumes:
      - './registry/auth.htpasswd:/auth/htpasswd:ro'
    environment:
      REGISTRY_STORAGE: filesystem
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: 'Registry Realm'
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      REGISTRY_HTTP_ADDR: '0.0.0.0:5000'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin: "['*']"
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods: "['GET','HEAD','PUT','POST','DELETE','OPTIONS']"
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers: "['Authorization','Content-Type']"
      REGISTRY_STORAGE_DELETE_ENABLED: 'true'
      REGISTRY_HTTP_IDLE_TIMEOUT: '1h'
      REGISTRY_HTTP_WRITE_TIMEOUT: '1h'
      REGISTRY_HTTP_READ_TIMEOUT: '1h'
      REGISTRY_HTTP_SECRET: '${SERVICE_PASSWORD_64_REGISTRY_HTTP_SECRET}'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  minio:
    networks:
      - trigger-net
    image: bitnamilegacy/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: '${SERVICE_PASSWORD_MINIO}'
      MINIO_DEFAULT_BUCKETS: packets
      MINIO_BROWSER: 'on'
    volumes:
      - 'minio-data:/bitnami/minio/data'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  supervisor:
    networks:
      - trigger-net
    image: 'ghcr.io/triggerdotdev/supervisor:v4-beta'
    restart: unless-stopped
    depends_on:
      - docker-proxy
      - webapp
    user: root
    command: "sh -c \"chown -R node:node /home/node/shared && exec /usr/bin/dumb-init -- pnpm run --filter supervisor start\"\n"
    environment:
      TRIGGER_API_URL: http://webapp:3000
      OTEL_EXPORTER_OTLP_ENDPOINT: http://webapp:3000/otel
      TRIGGER_WORKER_TOKEN: 'file:///home/node/shared/worker_token'
      MANAGED_WORKER_SECRET: ${SERVICE_PASSWORD_MANAGEDWORKER}
      TRIGGER_WORKLOAD_API_DOMAIN: supervisor
      TRIGGER_WORKLOAD_API_PORT_EXTERNAL: 8020
      DOCKER_HOST: tcp://docker-proxy:2375
      DOCKER_RUNNER_NETWORKS: trigger-net
      DOCKER_AUTOREMOVE_EXITED_CONTAINERS: 1
      DOCKER_REGISTRY_URL: $SERVICE_URL_REGISTRY_5000
      DOCKER_REGISTRY_USERNAME: ${REGISTRY_USERNAME:-trigger}
      DOCKER_REGISTRY_PASSWORD: '${REGISTRY_PASSWORD:-very-secure-indeed}'
      DEBUG: 0
      ENFORCE_MACHINE_PRESETS: 1
      TRIGGER_DEQUEUE_INTERVAL_MS: 1000
    volumes:
      - 'shared-data:/home/node/shared'
    healthcheck:
      test: ["CMD", "node", "-e", "http.get('http://localhost:8020/health', res => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
  docker-proxy:
    networks:
      - trigger-net
    image: 'tecnativa/docker-socket-proxy:latest'
    restart: unless-stopped
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    environment:
      LOG_LEVEL: info
      POST: 1
      CONTAINERS: 1
      IMAGES: 1
      INFO: 1
      NETWORKS: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "2375"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s
volumes:
  postgres-data:
  redis-data:
  clickhouse-data:
  minio-data:
  shared-data:
  registry-data:
networks:
  trigger-net: